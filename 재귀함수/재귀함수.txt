<재귀 함수 디자인의 과정>
1. 작성하려는 함수의 역할을 말로 명확하게 정의한다. 
2. 함수의 기저조건에서 제대로 동작하게 작성한다.
3. 함수가 제대로 동작한다고 가정하고 함수를 완성한다. 


★ 어떻게 문제속에서 재귀적 패턴을 파악할 것인가
"나 안에 내가 있다 라는 패턴을 찾아야 함!"

★ 재귀함수의 디자인 절차 
1. 함수가 무슨 역할을 하는지 정의하기 
2. 기저조건이 언제인지(재귀 패턴이 끝나는 경우) 
3. 기저 조건에서 된다고 가정하고 함수 작성 

★ [예제1] n의 m 제곱 

상황 정의 
기저 조건 -> n=0일때, 재귀가 멈춰야 할 때.

getPower(n, m) = n * getPower(n, m-1) 

★ [예제2] N to M : n 부터 m 까지 더하기 

1. getSum(n, m) = n부터 m까지의 합을 구하는 함수
2. 기저조건: m = n 일 경우 
3. getSum(n, m) = n + getSum(n+1, m)

★ [예제3] 각 자릿수의 합 

1. getDigitSum(x) : 정수 x의 각 자릿수의 합을 더해서 반환하는 함수 
2. x가 한 자리수일 경우 
3. getDigitSum(x) = x/%10 + getDigitSum(x/10)

★ [예제4] 이진수 출력하기 

※ 특이사항 : 반환이 아니라 출력해야 함.

1. printBinary(x) : 정수 x를 이진수로 바꾼 결과를 출력하는 함수 
2. 기저 조건 : x를 2로 나누어 몫이 0일 경우(혹은 x값이 1일 경우)
3. getBinary(x/2) = getBinary(x/2) 후 printf("%d", x%2);

★ [예제5] 팰린드롬인지 판별하기
※ 팰린드롬 : 뒤집어도 똑같은 문자열, 즉 좌우 대칭인 문자열 

1. isPalindrome(word, idx) : 스트링 word의 idx와 그에 대칭되는 인덱스가 같은지 판별해서 팰린드롬인지 판별해주는 함수
2. 문자열 중간에 인덱스가 올경우 idx ==strlen(word) /2  
※ 짝수던 홀수던 동일함 
3. isPalindrome(word, idx) = idx ++ -> isPalindrome(word, idx)


★ 반드시 재귀함수를 써서 구현해야 하는 예제

[예제6] 순열구하기

→ for문을 통해 모든 경우를 시도해보기에는 (완전탐색: Brute-Force Algorithm) 까다로운 경우
→ n개의 수를 n중 for문으로 순열을 구할 경우에 해당함

[예제7] division 

[예제8]






