<라이브러리 사용법>
▶ (데크) deque 라이브러리 → https://blockdmask.tistory.com/73
▶ (스택) stack 라이브러리 → https://m.blog.naver.com/PostView.nhn?blogId=kkj6369&logNo=220807809941&proxyReferer=https:%2F%2Fwww.google.com%2F
▶ (해시맵) unordered_map 라이브러리 → https://math-coding.tistory.com/m/31
                                                    	 → ※ 해시 vs 해시테이블 vs 해시맵
				     https://hee96-story.tistory.com/48
▶ (맵) map 라이브러리 → https://twpower.github.io/91-how-to-use-map-in-cpp
	                   → map(맵)과 unorderd_map(해시맵) 의 차이점
	                      둘이 사용법은 비슷하지만 구현된 자료구조가 다름.! 데이터 수에 따라 효율성 차이 있음.!
		        https://lessbutbetter.tistory.com/entry/STL-map-%EA%B3%BC-unorderedmap-%EC%B0%A8%EC%9D%B4%EB%8A%94
▶ (집합) set 라이브러리 → https://hwan-shell.tistory.com/130
		       → map과 set의 차이점 https://danco.tistory.com/71		        
▶ (큐) queue 라이브러리 https://travelbeeee.tistory.com/7
▶ (힙) Priority_Queue → queue 라이브러리에서 지원
		  ☞ https://travelbeeee.tistory.com/126
		  ☞ https://koosaga.com/9 (greater, less, compare 사용시 주의)
▶ (힙) Algorithm 라이브러리 → heap 관련 함수들 활용하는 방법도 있음.!
		           ☞ https://openmynotepad.tistory.com/35
▶ (Pair 클래스) utility 라이브러리 → https://blockdmask.tistory.com/64 
▶ (문자열) string 라이브러리 사용법 ☞ https://rottk.tistory.com/entry/C-String
			         ☞ https://jhnyang.tistory.com/115
			         ☞ https://blockdmask.tistory.com/338
▶ (vector) 라이브러리 → https://twpower.github.io/77-how-to-use-vector-in-cpp
▶ (algorithm) 라이브러리 사용법 ☞ https://modoocode.com/256
▶ (tuple) 라이브러리 사용법 ☞ https://jjeongil.tistory.com/148
                                       ☞ 큐와 튜플을 함께 사용하는 방법: https://cocoze.tistory.com/3
▶ (정규표현식) regex 라이브러리 → https://modoocode.com/303	     
※참조※
1. 정규식 형식 표
☞ https://ansohxxn.github.io/cpp/chapter18-5/#-%EC%A0%95%EA%B7%9C%EC%8B%9D-%ED%98%95%EC%8B%9D
2. 알고 있어야 할 8가지 정규식 표현
☞ https://blog.outsider.ne.kr/360

<자주 사용하는 함수 사용법>
▶ sort() 함수 ☞ algorithm 라이브러리 
▶ sort( ) 함수에서 compare함수, greater<int>(), less<int>() ☞ https://blockdmask.tistory.com/178
▶ fill() 함수 ☞ algorithm 라이브러리 
출처: https://twpower.github.io/121-usage-of-fill-function
☞ 사용할 필요 x
☞ vector<bool> v(n+1, true); //n+1 크기의 벡터를 true 값으로 채운다.
▶ begin(), end() 함수 ☞ vector 라이브러리, string 라이브러리
▶ 배열 회전 알고리즘 
출처↓
https://codingdog.tistory.com/entry/%EB%B0%B0%EC%97%B4-%ED%9A%8C%EC%A0%84-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98-%EC%9D%BD%EB%8A%94-%EB%B0%A9%EB%B2%95%EB%A7%8C-%EC%83%9D%EA%B0%81%ED%95%98%EB%A9%B4-%EC%96%B4%EB%A0%B5%EC%A7%80-%EC%95%8A%EC%95%84%EC%9A%94

<algorithm 라이브러리>
▶ reverse() 함수 : 역순 정렬
☞ sort 함수와 사용법 같음.
▶ sort() 함수 : '벡터', '배열' 뿐만 아니라 스트링 하나의 '문자열'도 정렬 가능함!! (안정성 보장 x)
▶ stable_sort() 함수 : 안정성을 보장하는 정렬 (같은 데이터에 대해서 상대적 순서 유지)
▶ unique() 함수 : '연속'된 숫자 제거함. 하지만 남은 칸에 임의의 숫자로 채움. 
☞ erase(unique(v.begin(), v.end()), v.end()); // unique 함수를 사용하고 나면 last 포인터가 작업한 곳으로 이동해있음. 
▶ sort() -> erase() + unique() 조합 : '중복'된 숫자 제거 가능.
▶ find() 
☞ string의 find 함수와 다름. 배열 혹은 벡터에서 원하는 값이 있는지 찾기.
☞ https://dkanxmstmdgml.tistory.com/m/59
※ 원하는 요소의 인자 찾기 
☞ https://torbjorn.tistory.com/265
▶ swap(a, b) 
☞ a와 b를 바꾸는 함수 //이미 algorithm 라이브러리에 구현돼 있음.
☞ https://ldgeao99.tistory.com/273
▶ lower_bound() 함수 
: 배열에서 'x 이상'인 첫 번째 원소의 위치를 반환하는 함수
▶ upper_bound() 함수
: 배열에서 'x 초과'인 첫 번째 원소의 위치를 반환하는 함수
※ 주의 ※ 
- 이진 탐색 기반의 탐색법 → 따라서 정렬이 된 상태에서 호출해야 함.
- 반환값은 이터레이터(벡터의 경우) 혹은 포인터임(의 경우). 
- 배열에서 x의 등장 횟수 : upper_bound() - lower_bound()
☞ https://blockdmask.tistory.com/168

<cstring 라이브러리> 
▶ memset ☞ 메모리 초기화 함수
▶ memcpy ☞ 메모리 복사 함수

<문자열> ★string 라이브러리★
▶ getline 함수 ☞ cin으로 공백 있는 문자열 입력 x 
	        ☞ 그 해결책: getline!! https://modoocode.com/236
	        ※ 하지만 getline 앞에 >> 연산자 cin으로 입력받았다면? getchar!! https://modoocode.com/44
▶ int num = s[i] - '0' : char to int
▶ at( ) 함수: 문자열의 요소를 '문자'로 바꿔줌 ☞ https://makerj.tistory.com/127
☞ 근데 s.at(i) 이렇게 접근해도 되지만 s[i]로 접근해도 바로 '문자' 받아옴.
☞ https://m.blog.naver.com/PostView.nhn?blogId=kimjd921&logNo=40198075816&proxyReferer=https%3A%2F%2Fwww.google.com%2F
▶ append( ) 함수: string 합치기 ☞ string 라이브러리 
https://rottk.tistory.com/entry/C-String
▶ find( ) 함수 ☞ https://modoocode.com/241 
	      ☞ 문자열 s 안에서 특정 문자열을 찾음. algorithm의 find와 다름.
▶ tolower( ) 함수, toupper( ) 함수: 문자열의 대문자 소문자 변환 
▶ substr() 함수 ☞ 문자열 자르기(x), 문자열 sub 일부분 반환(o)
                     ☞ [pos, pos + count)
▶ erase() 함수 ☞ 문자열 '범위' 삭제 
	      ☞ erase(0, 4); 시작인덱스 부터 몇   개 삭제할지.
▶ replace() 함수 ☞ 특정 문자열 대체 
	         ☞ replace(index, 1, ""); 식으로 특정 문자 삭제로 응용 가능(index부터 1개의 문자를 대체)

<'문자'를 아스키코드로?> ※문자열이 아닌 문자!※
알파벳 소문자/대문자, 숫자: x => (int) x

<문자열 형변환> 
- string to int 
☞ <string> stoi() 인자로 string 자료형이 들어감
☞ https://blockdmask.tistory.com/333
※"0010"같은 것도 숫자로 변환해준다!※
- string to '자료형' : stoll 함수 
☞ https://blockdmask.tistory.com/333
- int to string 
☞ <string> to_string() 인자로 int 자료형이 들어감.
☞ https://blockdmask.tistory.com/334
- char to int 아스키코드 이용하여 int num = arr[0]-'0'; 
- int to char  
☞ char c = (char)(i+48); // i가 정수
- array to int 
☞ <string.h> atoi() 인자로 char형 배열이 들어감
- char to string 
☞ https://shjz.tistory.com/91

<문자열> ★cctype 라이브러리(C언어)★ 
▶ isupper() 함수, islower() 함수 ☞ 대소문자 구별
https://blog.naver.com/sharonichoya/220513886595

<문자열 토큰 분리> ★sstream 라이브러리★
☞ https://geekhub.tistory.com/63  //이대로 쓰면 됨.!

<해시맵> ★unordered_map 라이브러리★
▶ count(키) 함수 -> 키에 해당하는 값이 있는지 없는지 판단.. return 1또는 0 (중복 허용x)

<벡터> ★vector 라이브러리★
출처: https://blockdmask.tistory.com/70
▶ 맨앞, 맨뒤 iterator로 반환 ☞ begin(), end() ※ 벡터랑 스트링에서 지원! 
▶ 맨앞, 맨뒤 참조 ☞ front(), back()
▶ 맨뒤 삭제 ☞ pop_back()
▶ 특정 위치 삭제 ☞ erase(iter), erase(start, end+1) // 이터레이터 타입 들어감.
출처: https://blockdmask.tistory.com/75
▶ 모든 요소 삭제 ☞ clear(); 
▶ 벡터 크기 지정 ☞ resize(n); //n의 크기로 지정 
	           ☞ resize(n, x); //n의 크기를 x값으로 초기화 
 
<수학>
▶ 순열 next_permutation() 함수 ☞ algorithm 라이브러리
https://twpower.github.io/82-next_permutation-and-prev_permutation
▶ 조합 : nex_permutation() 함수와 0과 1을 기록하는 배열 이용
https://twpower.github.io/90-combination-by-using-next_permutation
▶ pow( ) 함수,  sqrt( ) 함수 ☞ cmath 라이브러리 
https://blockdmask.tistory.com/307
▶ max_element(), min_element() ☞ algorithm 라이브러리 : 최대, 최소 값 혹은 주소 구하기
출처: https://m.blog.naver.com/PostView.nhn?blogId=kks227&logNo=220246803499&proxyReferer=https:%2F%2Fwww.google.com%2F 
▶ min() 함수 ☞ https://m.blog.naver.com/kks227/220246545025 
// 주의사항 인자 2개만 비교 가능

<C++ 소수점 출력>
C++의 cout을 사용해 소수점 출력시 주의사항.
☞ https://atomic0x90.github.io/c++/2020/02/10/c++-decimal-place.html

<헷갈리는 문법>
▶priority_queue에서는 맨 앞 front()가 아니라 맨 위(루트) top()이다!
▶map 혹은 set 이터레이터로 접근..!
for(auto ptr = map.begin(); ptr != map.end(); ptr++)    
        answer *= (ptr->second + 1);
▶map 혹은 set에서 find() 함수 사용시 
☞ 찾으면 이터레이터 반환
☞ 못 찾으면 s.end() 반환
▶3차원 배열 
→ int arr[높이][행][열] (o) 
→ 높이가 맨 앞 인자임..! 
▶숫자 혹은 문자를 띄어쓰기 없이 일열로 입력 받을 경우
→ scanf("%1d", &x), scanf("%c", &x)
♧왜(Why)♧ scnaf는 엔터 혹은 공백(스페이스바)를 기준으로 끊어 읽기 때문!!
▶구조체 사용법
https://dojang.io/mod/page/view.php?id=409
구조체 초기화 방법
→ http://tcpschool.com/c/c_struct_intro
▶memset() 초기화 함수 → memset(array, 0, sizeof(array[0][0]) * m * n);
https://jaimemin.tistory.com/1468
▶예외처리
https://blog.hexabrain.net/179
▶ freopen을 통해 testcase 입력 간단하게 
https://gooddaytocode.blogspot.com/2016/04/freopen.html
▶ long long형의 의미
http://mwultong.blogspot.com/2007/01/c-long-long-printf-int64.html
- int는 -20억~20억 크기의 숫자를 표현 가능 
- long long은 조를 넘어 경 크깅의 숫자까지 표현 가능
- int와 long long  둘다 int형
▶ C++ 소수점 자릿수 조절하기 → https://pmoncode.tistory.com/20
▶ switch case문 → https://dojang.io/mod/page/view.php?id=196
▶ C/C++ 입출력 방법에 따른 속도 
ios_base :: sync_with_stdio(false); 
cin.tie(NULL); 
cout.tie(NULL);

→ https://eine.tistory.com/entry/CC-%EC%9E%85%EC%B6%9C%EB%A0%A5-%EB%B0%A9%EB%B2%95%EC%97%90-%EB%94%B0%EB%A5%B8-%EC%86%8D%EB%8F%84-%EC%A0%95%EB%A6%AC
▶ memset 함수 사용법 → https://blockdmask.tistory.com/441
▶ 2차원 벡터 사용법 → https://leeeegun.tistory.com/3
▶ C++ 동적할당 → https://boycoding.tistory.com/205
(1) 지역변수 
☞ vector<bool> v(n+1, true); //n+1 크기의 벡터를 true 값으로 채운다.
(2) 전역변수 
☞ resize 함수 사용

▶ 2차원 벡터 resize 및 초기화 방법 ※주의※ 벡터배열은 이렇게 사용할 수 x 

vector<vector<int>> list;
int main()
{
    int N,M;
    cin >> N >> M;
    list.resize(N,vector<int>(M,0));
    ......
}

☞ https://m.blog.naver.com/PostView.nhn?blogId=khndhkx123&logNo=221858234269&proxyReferer=https:%2F%2Fwww.google.com%2F

▶ 벡터 배열 VS 2차원 배열 
☞ 벡터 배열 : vector<int> v[10];
☞ 2차원 배열 : vector<vector<int>> v; 

▶ 3차원 벡터 resize 및 초기화 방법
https://noel-embedded.tistory.com/811
▶ 벡터 선언과 동시에 초기화 방법
 → https://riptutorial.com/ko/cplusplus/example/1676/std----vector-%EC%B4%88%EA%B8%B0%ED%99%94%ED%95%98%EA%B8%B0
▶ pair 클래스 정렬
→ https://withhamit.tistory.com/195
▶ pair 클래스 초기화 방법
https://m.blog.naver.com/lee_wonyeol/221740516977
▶ auto for문 혹은 범위 for문 사용법 
→ https://blockdmask.tistory.com/319 
▶ C++ 자료형 정리
https://offbyone.tistory.com/115
▶ 자료형의 확장과 축소
https://dojang.io/mod/page/view.php?id=112
▶ 비트연산자 사용법
https://dojang.io/mod/page/view.php?id=173
▶ 이터레이터 사용법
https://eehoeskrap.tistory.com/263
▶ shift 연산자 사용법
https://hahahia.tistory.com/115
▶ unordered_map에서 키가 있는지 검색하는 법. -> find함수 혹은 count함수 사용
https://umbum.tistory.com/744
▶ N진수 / N진법 관련
https://codedragon.tistory.com/1241

<시간초과>
C++ 입출력때문에 시간 초과 방지, 꼭 써주자!!
☞ https://algwang.tistory.com/10

<시간복잡도>
▶ 이진탐색: O(log 2의 N)
▶ 연산 1억번 수행시간= 1초
▶ 실행시간: ms x 0.001 = s
▶ 소수 찾기
(1) 에라토스테네스의 체 → O(Nlog(logN))
(2) 일일이 구하기 → O(N^2)
▶ STL의 시간복잡도
♣ map, set  (unordered_OOO의 map과 set 말고)
☞ 삽입, 삭제, 탐색 모두 O(logN) 
※ map과 set은 Red-Black Tree(이진 탐색 트리의 일종)으로 구현되어 있기 때문. 
※ unordered_map과 unordered_set은 해시 방식으로 구현됨. 
→ https://gnaseel.tistory.com/10 (map)
→ https://hydroponicglass.tistory.com/171 (set)

♣ list 
☞ '지정된 위치'를 삽입, 삭제하는 것은 O(1)
☞ 탐색, 임의원소 접근 O(n)  
♣ vector 
☞ 삽입, 삭제, 탐색 모두 O(n)
☞ 임의원소 접근 O(1) 
♣ algorithm의 sort 함수
☞ 퀵 소트 기반으로 구현된 함수이므로 O(nlogN)