<라이브러리 사용법>
▶ (스택)stack 라이브러리 → https://m.blog.naver.com/PostView.nhn?blogId=kkj6369&logNo=220807809941&proxyReferer=https:%2F%2Fwww.google.com%2F
▶ (해시맵) unordered_map 라이브러리 → https://math-coding.tistory.com/m/31
▶ (집합) set 라이브러리 → https://hwan-shell.tistory.com/130
		     → map과 set의 차이점
		         https://yoshiki.tistory.com/entry/STL%EC%9D%98-Set-Map-%EC%82%AC%EC%9A%A9
▶ (큐) queue 라이브러리 https://travelbeeee.tistory.com/7
▶ (힙)Priority_Queue → queue 라이브러리에서 지원
		  ☞ https://travelbeeee.tistory.com/126
		  ☞ https://koosaga.com/9 (greater, less, compare 사용시 주의)
▶ (힙)Algorithm 라이브러리 → heap 관련 함수들 활용하는 방법도 있음.!
		           ☞ https://openmynotepad.tistory.com/35
▶ (Pair 클래스) utility 라이 브러리 → https://blockdmask.tistory.com/64 
▶ (문자열)string 라이브러리 사용법 ☞ https://rottk.tistory.com/entry/C-String
			         ☞ https://jhnyang.tistory.com/115
			         ☞ https://blockdmask.tistory.com/338
▶ vector 라이브러리 → https://twpower.github.io/77-how-to-use-vector-in-cpp
▶ algorithm 라이브러리 사용법 ☞ https://modoocode.com/256


<자주 사용하는 함수 사용법>
▶ sort() 함수 ☞ algorithm 라이브러리 
▶ sort( ) 함수에서 compare함수, greater<int>(), less<int>() ☞ https://blockdmask.tistory.com/178
▶ fill() 함수 ☞ algorithm 라이브러리 
출처: https://twpower.github.io/121-usage-of-fill-function
☞ 사용할 필요 x
☞ vector<bool> v(n+1, true); //n+1 크기의 벡터를 true 값으로 채운다.
▶ begin(), end() 함수 ☞ vector 라이브러리, string 라이브러리


<algorithm 라이브러리>
▶ reverse() 함수 : 역순 정렬
☞ sort 함수와 사용법 같음.
▶ sort() 함수 : '벡터', '배열' 뿐만 아니라 스트링 하나의 '문자열'도 정렬 가능함!! (안정성 보장 x)
▶ stable_sort() 함수 : 안정성을 보장하는 정렬 (같은 데이터에 대해서 상대적 순서 유지)
▶ unique() 함수 : '연속'된 숫자 제거함. 하지만 남은 칸에 임의의 숫자로 채움. 
☞ erase(unique(v.begin(), v.end()), v.end()); // unique 함수를 사용하고 나면 last 포인터가 작업한 곳으로 이동해있음. 
▶sort() -> erase() + unique() 조합 : '중복'된 숫자 제거 가능.
▶find() 
☞ string의 find 함수와 다름. 배열 혹은 벡터에서 원하는 값이 있는지 찾기.
☞ https://dkanxmstmdgml.tistory.com/m/59
※ 원하는 요소의 인자 찾기 
☞ https://torbjorn.tistory.com/265
▶swap(a, b) 
☞ a와 b를 바꾸는 함수 //이미 algorithm 라이브러리에 구현돼 있음.

<문자열> ★string 라이브러리★
▶ int num = s[i] - '0' : char to int
▶ at( ) 함수: 문자열의 요소를 '문자'로 바꿔줌 ☞ https://makerj.tistory.com/127
☞ 근데 s.at(i) 이렇게 접근해도 되지만 s[i]로 접근해도 바로 '문자' 받아옴.
☞ https://m.blog.naver.com/PostView.nhn?blogId=kimjd921&logNo=40198075816&proxyReferer=https%3A%2F%2Fwww.google.com%2F
▶ append( ) 함수: string 합치기 ☞ string 라이브러리 
https://rottk.tistory.com/entry/C-String
▶ find( ) 함수 ☞ https://modoocode.com/241 
	      ☞ 문자열 s 안에서 특정 문자열을 찾음. algorithm의 find와 다름.
▶tolower( ) 함수, toupper( ) 함수: 문자열의 대문자 소문자 변환 
▶substr() 함수 ☞ 문자열 자르기(x), 문자열 sub 일부분 반환(o)
                     ☞ [pos, pos + count)
▶erase() 함수 ☞ 문자열 '범위' 삭제 
	      ☞ erase(0, 4); 시작인덱스 부터 몇   개 삭제할지.
▶replace() 함수 ☞ 특정 문자열 대체 
	         ☞ replace(index, 1, ""); 식으로 특정 문자 삭제로 응용 가능(index부터 1개의 문자를 대체)

<문자열 형변환> 
- string to int 
☞ <string> stoi() 인자로 string 자료형이 들어감
☞ https://blockdmask.tistory.com/333
※"0010"같은 것도 숫자로 변환해준다!※
- string to '자료형' : stoll 함수 
☞ https://blockdmask.tistory.com/333
- int to string 
☞ <string> to_string() 인자로 int 자료형이 들어감.
☞ https://blockdmask.tistory.com/334
- char to int 아스키코드 이용하여 int num = arr[0]-'0'; 
- int to char  
☞ char c = (char)(i+48); // i가 정수
- array to int 
☞ <string.h> atoi() 인자로 char형 배열이 들어감
- char to string 
☞ https://shjz.tistory.com/91

<문자열> ★cctype 라이브러리(C언어)★ 
▶ isupper() 함수, islower() 함수 ☞ 대소문자 구별
https://blog.naver.com/sharonichoya/220513886595

<문자열 토큰 분리> ★sstream 라이브러리★
☞ https://geekhub.tistory.com/63  //이대로 쓰면 됨.!

<해시맵> ★unordered_map 라이브러리★
▶ count(키) 함수 -> 키에 해당하는 값이 있는지 없는지 판단.. return 1또는 0 (중복 허용x)

<벡터> ★vector 라이브러리★
출처: https://blockdmask.tistory.com/70
▶ 맨앞, 맨뒤 iterator로 반환 ☞ begin(), end() ※ 벡터랑 스트링에서 지원! 
▶맨앞, 맨뒤 참조 ☞ front(), back()
▶맨뒤 삭제 ☞ pop_back()
▶특정 위치 삭제 ☞ erase(iter), erase(start, end+1) // 이터레이터 타입 들어감.
출처: https://blockdmask.tistory.com/75
▶ 모든 요소 삭제 ☞ clear(); 
▶ 벡터 크기 지정 ☞ resize(n); //n의 크기로 지정 
	           ☞ resize(n, x); //n의 크기를 x값으로 초기화 
 
<수학>
▶ 순열 next_permutation() 함수 ☞ algorithm 라이브러리
https://twpower.github.io/82-next_permutation-and-prev_permutation
▶ 조합 : nex_permutation() 함수와 0과 1을 기록하는 배열 이용
https://twpower.github.io/90-combination-by-using-next_permutation
▶ pow( ) 함수,  sqrt( ) 함수 ☞ cmath 라이브러리 
https://blockdmask.tistory.com/307
▶ max_element(), min_element() ☞ algorithm 라이브러리 : 최대, 최소 값 혹은 주소 구하기
출처: https://m.blog.naver.com/PostView.nhn?blogId=kks227&logNo=220246803499&proxyReferer=https:%2F%2Fwww.google.com%2F 
▶ min() 함수 ☞ https://m.blog.naver.com/kks227/220246545025 
// 주의사항 인자 2개만 비교 가능

<헷갈리는 문법>
▶ 2차원 벡터 사용법 → https://leeeegun.tistory.com/3
▶ C++ 동적할당 → https://boycoding.tistory.com/205
☞ 동적할당 할 필요 없이 벡터를 배열처럼 사용하면 된다. 
☞ vector<bool> v(n+1, true); //n+1 크기의 벡터를 true 값으로 채운다.
▶ 벡터 선언과 동시에 초기화 방법
 → https://riptutorial.com/ko/cplusplus/example/1676/std----vector-%EC%B4%88%EA%B8%B0%ED%99%94%ED%95%98%EA%B8%B0
▶ pair 클래스 정렬
→ https://withhamit.tistory.com/195
▶ pair 클래스 초기화 방법
https://m.blog.naver.com/lee_wonyeol/221740516977
▶ auto for문 혹은 범위 for문 사용법 
→ https://blockdmask.tistory.com/319 
▶ C++ 자료형 정리
https://offbyone.tistory.com/115
▶ 자료형의 확장과 축소
https://dojang.io/mod/page/view.php?id=112
▶ 비트연산자 사용법
https://dojang.io/mod/page/view.php?id=173
▶ 이터레이터 사용법
https://eehoeskrap.tistory.com/263
▶ shift 연산자 사용법
https://hahahia.tistory.com/115
▶ unordered_map에서 키가 있는지 검색하는 법. -> find함수 혹은 count함수 사용
https://umbum.tistory.com/744
★ 실행시간: ms x 0.001 = s
▶ N진수 / N진법 관련
https://codedragon.tistory.com/1241